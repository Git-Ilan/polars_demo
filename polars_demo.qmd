---
title: "Intro 2 Polars"
execute:
  warning: true
  error: true
  keep-ipynb: true
  cache: true
jupyter: python3
pdf-engine: lualatex
# theme: pandoc
html:
    code-tools: false
    fold-code: false
    author: Jonathan D. Rosenblatt
    data: 02-27-2023
    toc: false
    number-sections: true
    number-depth: 3
    embed-resources: true
---



# Background {#sec-background}


## Ritchie Vink, Rust and Apache Arrow

## Who Can Benefit?

- Researcher (DS, Analyst, Statistician, etc):
  - Working on their local machine. 
  - Working on a cloud machine (SageMaker, EC2).
- Production system:
  - Running on a dedicated server. 
  - Running on "serverless" (e.g. AWS Lambda, Google Cloud Functions).

## The DataFrame Landscape

Initially there were R's `data.frame`. 
R has evolved, and it now offers `tibble`s and `data.table`s.
Python had only `pandas` for years. 
Then the Python ecosystem exploded, and now we have:

-  [Pandas](https://pandas.pydata.org/): The original Python dataframe module. Build by Wes McKinney, on top of numpy.
-  [Polars](https://www.pola.rs/): A new dataframe module, build by Ritchie Vink, on top of Rust and Apache Arrow.
-  [datatable](https://datatable.readthedocs.io/en/latest/): An attempt to recreate R's [data.table](https://github.com/Rdatatable/data.table) API and (crazy) speed in Python. 
-  [Dask](https://www.dask.org/): A distributed computing engine for Python, with support for distributing data over multiple processes running Pandas (or numpy, Polars, etc).
-  [Vaex](https://vaex.io/): A high performance Python library for lazy Out-of-Core DataFrames (similar to dask, but with a different API).
-  [Modin](https://github.com/modin-project/modin): A drop-in distributed  replacement for Pandas, built on top of [Ray](https://www.ray.io/). 
-  [DuckDB](https://duckdb.org/): An embeddable SQL OLAP database management system. These are dataframe that are stored on disk, compute on a single process, and queried with SQL or pythonic API.
- [Daft](https://www.getdaft.io/): A distributed dataframe library built for "Complex Data" (data that doesn't usually fit in a SQL table such as images, videos, documents etc). 
-  [Fugue](https://fugue-tutorials.readthedocs.io/): A dataframe library that allows you to write SQL-like code, and execute it on different backends (e.g. Spark, Dask, Pandas, Polars, etc).
-  [pySpark](https://spark.apache.org/docs/latest/api/python/index.html): The Python API for Spark. Spark is a distributed computing engine, with support for distributing data over multiple processes running Pandas (or numpy, Polars, etc).
-  [CUDF](https://github.com/rapidsai/cudf): A GPU accelerated dataframe library, build on top of Apache Arrow.



See [here](https://pola-rs.github.io/polars-book/user-guide/misc/alternatives/) and [here](https://www.getdaft.io/projects/docs/en/latest/dataframe_comparison.html) for more details. 





# Motivation {#sec-motivation}

Each of the following, alone(!), is amazing.

1. Small memory footprint.
1. Native dtypes: missing, strings.
2. Lazy evaluation allows query Planning.
3. Streaming engine: No need to load entire dataset into memory.
4. Out of the box parallelism: Fast and informative messages for debugging.
5. Strict typing: This means the dtype of output is defined by the operation and not bu the input. This is both safer, and allows static analysis.


## Setting Up the Environment

At this point you may want to create and activate a [venv](https://realpython.com/python-virtual-environments-a-primer/) for this project. 

```{python}
# %pip install --upgrade pip
# %pip install --upgrade polars
# %pip install --upgrade pyarrow
# %pip install --upgrade pandas
# %pip install --upgrade plotly
# %pip freeze > requirements.txt
# %pip install -r requirements.txt
```


```{python}
#| label: polars-version
%pip show polars # check you polars version
```

```{python}
#| label: pandas-version
%pip show pandas # check you polars version
```




```{python}
#| label: preliminaries

import polars as pl
pl.Config(fmt_str_lengths=50)

import pandas as pd
import numpy as np
import pyarrow as pa
import plotly.express as px
import string
import random
import os
import sys
%matplotlib inline 
import matplotlib.pyplot as plt
from datetime import datetime

# Following two lines only required to view plotly when rendering from VScode. 
import plotly.io as pio
# pio.renderers.default = "plotly_mimetype+notebook_connected+notebook"
pio.renderers.default = "plotly_mimetype+notebook"
```




## Memory Footprint

### Memory Footprint of Storage

Comparing Polars to Pandas- the memory footprint of a series of strings. 

Polars. 
```{python}
letters = pl.Series(list(string.ascii_letters))

n = int(10e6)
letter1 = letters.sample(n,with_replacement=True)
letter1.estimated_size(unit='gb') 
```


Pandas before Pandas 2.0. 
```{python}
# Pandas with Ver 1.x backend
letter1_pandas = letter1.to_pandas(use_pyarrow_extension_array=False) 
letter1_pandas.memory_usage(deep=True, index=False) / 1e9
```

Pandas after Pandas 2.0, with the Pyarrow backend (Apr 2023).
```{python}
letter1_pandas = letter1.to_pandas(use_pyarrow_extension_array=True) 
letter1_pandas.memory_usage(deep=True, index=False) / 1e9
```


### Operating From Disk to Disk

What if my data does not fit into RAM? 
Turns out you manifest a lazy frame into disk, instead of RAM, thus avoiding the need to load the entire dataset into memory. 
Alas, the function that does so, [sink_parquet()](https://pola-rs.github.io/polars/py-polars/html/reference/lazyframe/api/polars.LazyFrame.sink_parquet.html), has currently limited functionality. 
It is certainly worth keeping an eye on this function, as it matures.

::: {.callout-note}
Although the potential of `sink_parquet()` is amazing, I find that it currently does not support complicated queries. 
:::


## Lazy Frames and Query Planning

Consider a sort operation that follows a filter operation. 
Ideally, filter precedes the sort, but we did not ensure this... 
We now demonstrate that Polars' query planner will do it for you. 
En passant, we see Polars is more efficient also without the query planner.


Polars' Eager evaluation in the **wrong** order. 
Sort then filter.

```{python}
%timeit -n 2 -r 2 letter1.sort().filter(letter1.is_in(['a','b','c']))
```

Polars' Eager evaluation in the **right** order. 
Filter then sort.

```{python}
%timeit -n 2 -r 2 letter1.filter(letter1.is_in(['a','b','c'])).sort()
```

Polars' Lazy evaluation (i.e. with query planning) in the **wrong** order. 
Receives sort then filter; executes filter then sort.

```{python}
%timeit -n 2 -r 2 letter1.alias('letters').to_frame().lazy().sort(by='letters').filter(pl.col('letters').is_in(['a','b','c'])).collect()
```

Things to note:

1. A lazy evaluation was triggered when `df.lazy()` converted the Polars DataFrame to a Polars LazyFrame.
2. The query planner worked: The Lazy evaluation in the wrong order timed as much as an eager evaluation in the right order; even when accounting for the overhead of converting the frame from eager to lazy.

Now compare to Pandas...

Pandas' eager evaluation in the **wrong** order.

```{python}
%timeit -n1 -r1 letter1_pandas.sort_values().loc[lambda x: x.isin(['a','b','c'])]
```

Pandas eager evaluation in the **right** order: Filter then sort.

```{python}
%timeit -n1 -r1 letter1_pandas.loc[lambda x: x.isin(['a','b','c'])].sort_values()
```

Pandas without lambda functions syntax; looks slightly better.

```{python}
%timeit -n 2 -r 2 letter1_pandas.loc[letter1_pandas.isin(['a','b','c'])].sort_values()
```

Things to note:

1. Query planning works!
2. Pandas has dramatically improved since <2.0.0. 
3. Lambda functions are always slow (both Pandas and Polars).


## Optimized for Within-Column Operations

Polars seamlessly parallelizes over columns (also within, when possible). 
As the number of columns in the data grows, we would expect fixed runtime until all cores are used, and then linear scaling. 
The following code demonstrates this idea, using a simple sum-within-column.

```{python}
# Mac users with Apple silicon (M1 or M2) may also want to benchmark Apples' mlx:
# %pip install mlx
import mlx.core as mx

```

```{python}

# Maker an array of floats.
A_numpy = np.random.randn(int(1e6), 10)

A_numpy = A_numpy.copy()
A_polars = pl.DataFrame(A_numpy)
A_pandas_numpy = pd.DataFrame(A_numpy)
A_pandas_arrow = pd.DataFrame(A_numpy, dtype="float32[pyarrow]")
# A_arrow = pa.Table.from_pandas(A_pandas_numpy) # no sum method
A_mlx = mx.array(A_numpy)

```


Candidates currently omited:

1. JAX
2. PyTorch
3. TensorFlow
4. ...?



### Summing Over Columns

```{python}
%timeit -n 4 -r 2 A_numpy.sum(axis=0)
```

```{python}
A_numpy.sum(axis=0).shape
```

```{python}
%timeit -n 4 -r 2 A_polars.sum()
```

```{python}
A_polars.sum().shape
```

```{python}
%timeit -n 4 -r 2 A_mlx.sum(axis=0)
```

```{python}
A_mlx.sum(axis=0).shape
```



### 50 Shades of Pandas

Pandas with numpy backend
```{python}
%timeit -n 4 -r 2 A_pandas_numpy.sum(axis=0)
```

```{python}
A_pandas_numpy.sum(axis=0).shape
```


Pandas with arrow backend
```{python}
%timeit -n 4 -r 2 A_pandas_arrow.sum(axis=0)
```

```{python}
A_pandas_arrow.sum(axis=0).shape
```

Pandas with numpy backend, converted to numpy
```{python}
%timeit -n 4 -r 2 A_pandas_numpy.values.sum(axis=0)
```

```{python}
A_pandas_numpy.values.sum(axis=0).shape
```

Pandas with arrow backend, converted to numpy
```{python}
%timeit -n 4 -r 2 A_pandas_arrow.values.sum(axis=0)
```

```{python}
type(A_pandas_arrow.values)
```

```{python}
A_pandas_arrow.values.sum(axis=0).shape
```

Pandas to mlx
```{python}
%timeit -n 4 -r 2 mx.array(A_pandas_numpy.values).sum(axis=0)
```

```{python}
mx.array(A_pandas_numpy.values).sum(axis=0).shape
```





### Summing Over Rows

```{python}
%timeit -n 4 -r 2 A_numpy.sum(axis=1)
```

```{python}
A_numpy.sum(axis=1).shape
```

```{python}
%timeit -n 4 -r 2 A_polars.sum_horizontal()
```


```{python}
A_polars.sum_horizontal().shape
```

```{python}
%timeit -n 4 -r 2 A_mlx.sum(axis=1)
```

```{python}
A_mlx.sum(axis=1).shape
```

### 50 Shades of Pandas

Pandas with numpy backend
```{python}
%timeit -n 4 -r 2 A_pandas_numpy.sum(axis=1)
```


Pandas with arrow backend
```{python}
%timeit -n 4 -r 2 A_pandas_arrow.sum(axis=1)
```

Pandas with numpy backend, converted to numpy
```{python}
%timeit -n 4 -r 2 A_pandas_numpy.values.sum(axis=1)
```

Pandas with arrow backend, converted to numpy
```{python}
%timeit -n 4 -r 2 A_pandas_arrow.values.sum(axis=1)
```


Pandas to mlx
```{python}
%timeit -n 4 -r 2 mx.array(A_pandas_numpy.values).sum(axis=1)
```




## Speed Of Import

Polar's `read_X` functions are quite faster than Pandas. 
This is due to better type "guessing" heuristics, and easier mapping between the disk representation and memory representation of the data.

We benchmark by making synthetic data, save it on disk, and reimporting it.

### CSV Format

```{python}
n_rows = int(1e5)
n_cols = 10
data_polars = pl.DataFrame(np.random.randn(n_rows,n_cols))
data_polars.write_csv('data/data.csv', include_header = False)
f"{os.path.getsize('data/data.csv')/1e7:.2f} MB on disk"
```


Import with Pandas.

```{python}
%timeit -n2 -r2 data_pandas = pd.read_csv('data/data.csv', header = None)
```

Import with Polars.

```{python}
%timeit -n2 -r2 data_polars = pl.read_csv('data/data.csv', has_header = False)
```

What is the ratio of times on your machine?
How many cores do you have?




### Parquet Format

```{python}
data_polars.write_parquet('data/data.parquet')
f"{os.path.getsize('data/data.parquet')/1e7:.2f} MB on disk"
```

```{python}
%timeit -n2 -r2 data_pandas = pd.read_parquet('data/data.parquet')
```

```{python}
%timeit -n2 -r2 data_polars = pl.read_parquet('data/data.parquet')
```

### Feather (Apache IPC) Format

```{python}
data_polars.write_ipc('data/data.feather')
f"{os.path.getsize('data/data.feather')/1e7:.2f} MB on disk"
```

```{python}
%timeit -n2 -r2 data_polars = pl.read_ipc('data/data.feather')
```

```{python}
%timeit -n2 -r2 data_pandas = pd.read_feather('data/data.feather')
```



### Pickle Format
```{python}
import pickle
pickle.dump(data_polars, open('data/data.pickle', 'wb'))
f"{os.path.getsize('data/data.pickle')/1e7:.2f} MB on disk"
```

```{python}
%timeit -n2 -r2 data_polars = pickle.load(open('data/data.pickle', 'rb'))
```


### Summarizing Import

Things to note:

1. The difference in speed is quite large between Pandas vs. Polars.
1. When dealing with CSV's, the function `pl.read_csv` reads in parallel, and has better type guessing heuristics.
2. The difference in speed is quite large between csv vs. parquet and feather, with feather\<parquet\<csv.
1. Feather is the fastest, but larger on disk. Thus good for short-term storage, and parquet for long-term.
1. The fact that pickle isn't the fastest surprised me; but then again, it is not optimized for data.



## Speed Of Join

Because pandas is built on numpy, people see it as both an in-memory database, and a matrix/array library. With polars, it is quite clear it is an in-memory database, and not an array processing library (despite having a `pl.dot()` function for inner products). As such, you cannot multiply two polars dataframes, but you can certainly join then efficiently.

Make some data:

```{python}
def make_data(n_rows, n_cols):
  data = np.concatenate(
  (
    np.arange(n_rows)[:,np.newaxis], # index
    np.random.randn(n_rows,n_cols), # values
    ),
    axis=1)
    
  return data


n_rows = int(1e6)
n_cols = 10
data_left = make_data(n_rows, n_cols)
data_right = make_data(n_rows, n_cols)

data_left.shape
```

### Polars Join


```{python}
data_left_polars = pl.DataFrame(data_left)
data_right_polars = pl.DataFrame(data_right)

%timeit -n2 -r2 polars_joined = data_left_polars.join(data_right_polars, on = 'column_0', how = 'left')
```

### Pandas Join

```{python}
data_left_pandas = pd.DataFrame(data_left)
data_right_pandas = pd.DataFrame(data_right)

%timeit -n2 -r2 pandas_joined = data_left_pandas.merge(data_right_pandas, on = 0, how = 'inner')
```



## The NYC Taxi Dataset {#sec-nyc_taxi}

Empirical demonstration:
Load the celebrated NYC taxi dataset, filter some rides and get the mean `tip_amount` by `passenger_count`.

```{python}
path = 'data/NYC' # Data from https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page
file_names = os.listdir(path)
```

### Pandas

`df.query()` syntax.
```{python}
%%time 
taxi_pandas = pd.read_parquet(path)

query = '''
    passenger_count > 0 and 
    passenger_count < 5 and  
    trip_distance >= 0 and 
    trip_distance <= 10 and 
    fare_amount >= 0 and 
    fare_amount <= 100 and 
    tip_amount >= 0 and 
    tip_amount <= 20 and 
    total_amount >= 0 and 
    total_amount <= 100
    '''.replace('\n', '')
taxi_pandas.query(query).groupby('passenger_count').agg({'tip_amount':'mean'})
```

Well, the `df.loc[]` syntax is usually faster than the `query` syntax:

```{python}
%%time 
taxi_pandas = pd.read_parquet(path)

ind = (
    taxi_pandas['passenger_count'].between(1,4) 
    & taxi_pandas['trip_distance'].between(0,10) 
    & taxi_pandas['fare_amount'].between(0,100) 
    & taxi_pandas['tip_amount'].between(0,20) 
    & taxi_pandas['total_amount'].between(0,100)
)
(
    taxi_pandas[ind]
    .groupby('passenger_count')
    .agg({'tip_amount':'mean'})
)
```



### Polars

```{python}
%%time 

import pyarrow.dataset as ds
dset = ds.dataset("data/NYC", format="parquet")  # define folder as Pyarrow dataset

q = (
    pl.scan_pyarrow_dataset(dset)
    # pl.read_parquet("data/NYC/*.parquet") # will now work because parquet was created with Int32, and not Int64. 
    .filter(
        pl.col('passenger_count').is_between(1,4),
        pl.col('trip_distance').is_between(0,10),
        pl.col('fare_amount').is_between(0,100),
        pl.col('tip_amount').is_between(0,20),
        pl.col('total_amount').is_between(0,100)
    )
    .group_by('passenger_count')
    .agg(pl.col('tip_amount').mean().name.suffix('_mean'))
    )

q.collect()
```

```{python}
q.show_graph() # Graphviz has to be installed
```

Things to note:

1. I only have 2 parquet files. When I run the same with more files, despite my 16GB of RAM, **pandas will crash my python kernel**.
2. From the query graph I see import is done in parallel, and filtering done at scanning time!
3. Warning: The `pl.scan_paquet()` function will not work with a glob if files are in a remote data lake (e.g. S3). More on that later...




# Getting Help

Before we dive in, you should be aware of the following references for further help:

1.  A [github page](https://github.com/pola-rs/polars). It is particular important to subscribe to [release updates](https://github.com/pola-rs/polars/releases). 
2.  A [user guide](https://pola-rs.github.io/polars-book/user-guide/index.html).
3.  A very active community on [Discord](https://discord.gg/4UfP5cfBE7).
4.  The [API reference](https://pola-rs.github.io/polars/py-polars/html/reference/index.html).
5.  A Stack-Overflow [tag](https://stackoverflow.com/questions/tagged/python-polars).
6.  Cheat-sheet for [pandas users](https://www.rhosignal.com/posts/polars-pandas-cheatsheet/).

**Warning**: Be careful of AI assistants such as Github-Copilot, TabNine, etc. 
Polars is still very new, and they may give you pandas completions instead of polars.




# Preliminaries




## Object Classes

- **Polars Series**: Like a Pandas series. An in-memory array of data, with a name, and a dtype. 

- **Polars Expr**: A Polars series that is not yet computed, and that will be computed when needed.  A Polars Expression can be thought of as:
  1. A Lazy Series: A series that is not yet computed, and that will be computed when needed.
  2. A function: That maps a Polars series to another Polars series (possibly of length 1).

- **Polars LazyFrame**: A collection of Polars Expressions. This is the Polars equivalent of a Spark DataFrame. It is lazy, thus allows query planning.

- **Polars DataFrame**: A collection of Polars Series. This is the Polars equivalent of a Pandas DataFrame. It is eager, and does not allow query planning.
  

::: {.callout-warning}
Not all methods are implemented for all classes. 
In particular, not all `pl.Dataframe` methods are implemented for `pl.LazyFrame` and vice versa. The same goes for `pl.Series` and `pl.Expr`.

This is not because the developers are lazy, but because the API is still being developed, and there are fundamental differences between the classes.

Think about it:

1. Why do we not see a `df.height` attribute for a `pl.LazeFrame`?
2. Why do we not see a `df.sample()` method for a `pl.LazyFrame`?

:::



## Polars dtypes

Polars has its own dtypes, call with `pl.<dtype>`; e.g. `pl.Int32`.
A comprehensive list may be found [here](https://docs.pola.rs/py-polars/html/reference/datatypes.html).

Here are the most common. 
Note, that unlike Pandas, all are native Polars dtypes, and do not recur to Python objects. 

- Floats: 
  - `pl.Float64`: Arguably, the most frequently used dtype.
- Integers: 
  - `pl.Int64`: The most frequently used integer dtype.
- Booleans: 
  - `pl.Boolean`: As the name suggests. 
- Strings: 
  - `pl.Utf8`: The only string encoding supported by Polars. 
  - `pl.String`: Recently introduced as an alias to `pl.Utf8`.
- Temporal: 
  - `pl.Date`: Date, without time.
  - `pl.Datetime`: Date, with time. 
  - `pl.Time`: Time, without date.
  - `pl.Duration`: Time difference.
- Nulls: 
  - `pl.Null`: Polars equivalent of `None`.
  - `np.nan`: The numpy dtype. Essentially a float, and not as a null.
- Nested:
  - `pl.List`: A list of items.
  - `pl.Array`: Fixed length list. 
  - `pl.Struct`: Think of it as a dict within a frame.



Things to note:

-  Polars has no `Int` dtype, nor `Float`. You must specify the number of bits.
-  Polars recently introduced `pl.String` as an alias for `pl.Utf8`. No other encodings are supported.
-  Polars also supports `np.nan`(!), which is different than its `pl.Null` dtype. `np.nan` is a **float**, and `Null` is a None.
  



## The Polars API

- You will fall in love with it!
- Much more similar to PySpark than to Pandas. The Pandas API is simply not amenable to lazy evaluation. 


### Some Design Principles

Here are some principles that will help you understand the API:

1. All columns are created equal. There are **no indexing** columns. 

2. Always **remember the class** you are operating on: Is it a series, a dataframe, an expression, or a lazyframe?

5. Operations on the columns of a dataframe will always be part of a **context**. Context may include:
    1. `pl.DataFrame.select()`: This is the most common context. It is used to select columns, and to apply operations on columns.
    2. `pl.DataFrame.with_columns()`: This is used to add columns to a dataframe.
    3. `pl.DataFrame.group_by().agg()`: The `.agg()` context works like a `.select()` context, but it is used to apply operations on sub-groups of rows.

3. Two-word methods are always lower-case, and separated by underscores. E.g: `.is_in()` instead of `.isin()`; `.is_null()` instead of `.isnull()`; `.group_by()` instead of `.groupby()` (starting version 19.0.0). 

4. Polars was designed for operation within **columns**, not within rows. Operations within rows are the exception, and the will have a `_horizontal()` suffix. Examples: `pl.sum_horizontal()`, `pl.mean_horizontal()`, `pl.rolling_sum_horizontal()`.

6. Look for `pl.Expr()` methods so you can chain operations. E.g. `pl.col('a').add(pl.col('b'))` is better than `pl.col('a') + pl.col('b')`; the former can be further chained.
  

### Some Examples of the API

Here is an example to give you a little taste of what the API feels like. 

```{python}
#| label: polars-api

# Make some data
polars_frame = pl.DataFrame(make_data(100,4))
polars_frame.limit(5)
```


::: {.callout-note}
What is the difference between `.head()` and `limit()`?
For eager frames? For lazy frames?
:::



Can you parse the following in your head?
```{python}
(
  polars_frame
  .rename({'column_0':'group'})
  .with_columns(
    pl.col('group').cast(pl.Int32),
    pl.col('column_1').ge(0).alias('non-negative'),
  )
  .group_by('non-negative')
  .agg(
    pl.col('group').is_between(1,4).sum().alias('one-to-four'),
    pl.col('^column_[0-9]$').mean().name.suffix('_mean'),
  )
)
```

Ask yourself:

- What is `polars_frame`? Is it an eager or a lazy Polars dataframe?
- Why is `column_1_mean` when `non-negative=false` indeed non negative?
- What is a polars expression?
- What is a polars series?
- How did I create the columns `column_1_mean`...`column_4_mean`?
- How would you have written this in Pandas?



```{python}
#| label: polars-api-second-example

(
  polars_frame
  .rename({'column_0':'group'})
  .select(
    pl.col('group').mod(2),

    pl.mean_horizontal(
      pl.col('^column_[0-9]$')
    )
    .name.suffix('_mean')
  )
  .filter(
    pl.col('group').eq(1),
    pl.col('column_1_mean').gt(0)
  )
)

```

Try parsing the following in your head:

```{python}

polars_frame_2 = (
  pl.DataFrame(make_data(100,1))
  .select(
    pl.col('*').name.suffix('_second')
  )
)



(
  polars_frame
  .join(
    polars_frame_2,
    left_on = 'column_0',
    right_on = 'column_0_second',
    how = 'left',
    validate='1:1
  )
)



```


Can you parse the following in your head?

```{python}

polars_frame_3 = pl.DataFrame(make_data(10,1))

(
  polars_frame.lazy()
  .select(
    pl.col('*').name.suffix('_first')
  )
  .with_context(
    polars_frame_3.lazy()
    .select(
      pl.col('*').name.suffix('_third')
    ) 
  )
  .select(
    'column_0_first',

    pl.when(
      pl.col('column_0_first').mod(2).eq(0)
      )
    .then(
      pl.lit(1)
      )
    .otherwise(
      polars_frame_3
      .select(
        pl.last().min()
        )
      )
  )
  .collect(streaming=True)
)

```




# Polars Series

A Polars series looks a feels a lot like a Pandas series.
You usually will try to avoid them because: (a) Your objects will usually be in frames, not in series. (b) If in frames, you will be calling `pl.Expr()` methods, and not `pl.Series()` methods. 
Getting used to Polars series, will thus give you bad intuitions when you move to Polars expressions.
Nevertheless, it is the simples object to learn, so we start there. 


Construct a series

```{python}
#| label: make-a-series
s = pl.Series("a", [1, 2, 3])
s
```

Make pandas series for later comparisons.

```{python}
#| label: make-a-pandas-series
s_pandas = pd.Series([1, 2, 3], name = "a")
s_pandas
```

Notice even the printing to Jupiter is different.

```{python}
#| label: check-series-type
type(s)
```

```{python}
#| label: check-pandas-series-type
type(s_pandas)
```

```{python}
#| label: check-series-dtype
s.dtype
```

```{python}
#| label: check-pandas-series-dtype
s_pandas.dtype
```

Renaming a series; will be very useful when operating on dataframe columns.

```{python}
#| label: rename-series
s.alias("b")
```



Constructing a series of floats, for later use.

```{python}
#| label: make-a-float-series
f = pl.Series("a", [1., 2., 3.])
f
```

```{python}
#| label: check-float-series-dtype
f.dtype
```




## Export To Other Python Objects

The current section deals with exports to other python objects, **in memory**. 
See @sec-disk-export for exporting to disk.

Export to Polars DataFrame.
```{python}
#| label: series-to-polars-dataframe
s.to_frame() 
```

Export to Python list. 
```{python}
#| label: series-to-list
s.to_list()
```

Export to Numpy array. 
```{python}
#| label: series-to-numpy
s.to_numpy() # useful for preparing data for learning with scikit-learn
```

Export to Pandas Series. 
```{python}
#| label: series-to-pandas-series
s.to_pandas()
```

Export to Arrow Array.
Useful for preparing data for learning with XGBoost which supports Arrow.
Maybe Scikit-learn will also support Arrow in the future? Although Scikit-learn [may support Polars](https://github.com/scikit-learn/scikit-learn/issues/25896) before it supports Arrow.
```{python}
#| label: series-to-arrow
s.to_arrow() 
```






## Memory Representation of Series

Object size in memory. 
Super useful for profiling.
Will only be available for eager objects; by definitions. 

```{python}
#| label: series-memory-size
s.estimated_size(unit="b") # 8(bytes) * 3(length)
```


## Filtering and Subsetting {#sec-filtering-subsetting-series}

```{python}
s[0] # same as s.__getitem__(0)
```


To filter, you need to use the `.filter()` method.

```{python}
#| label: series-filter-with-series
s.filter(pl.Series("a", [True, False, True])) # works
```

Filtering with the `[` operator will not work:

```{python}
#| label: series-subset-with-boolean
#| eval: false
s[[True, False, True]]
```


```{python}
#| label: series-filter-with-list
s.filter([True, False, True])
```

```{python}
#| label: series-limit
s.limit(2)
```

```{python}
#| label: series-head
s.head(2)
```


```{python}
#| label: series-tail
s.tail(2)
```

```{python}
#| label: series-sample
s.sample(2, with_replacement=False)
```

```{python}
#| label: series-gather-aka-iloc
s.gather([0, 2]) # same as s[0,2] and pandas .iloc[[0,2]]
```

```{python}
#| label: series-slice
s.slice(1, 2) # same as pandas .iloc[1:2]
```

```{python}
#| label: series-gather-every
s.gather_every(2) # same as pandas .iloc[::2]
```





## Aggregations

```{python}
#| label: series-sum
s.sum()
```

```{python}
#| label: series-min
s.min()
```

```{python}
#| label: series-arg-min
s.arg_min()
```

```{python}
#| label: series-max
s.max()
```

```{python}
#| label: series-arg-max
s.arg_max()
```

```{python}
#| label: series-mean
s.mean()
```

```{python}
#| label: series-median
s.median()
```

```{python}
#| label: series-quantile
s.quantile(0.2)
```

```{python}
#| label: series-entropy
s.entropy()
```

```{python}
#| label: polars-series-describe
s.describe() 
```

Polars `pl.series.describe()` is almost the same as Pandas `pd.series.describe()`.

```{python}
#| label: pandas-series-describe
s_pandas.describe()
```

```{python}
#| label: series-value-counts
s.value_counts()
```

## Missing

Thanks to Arrow, Polars has built in missing value support for all(!) dtypes. 
This has been a long awaited feature in the Python data science ecosystem with implications on speed, memory, style and more. 
The [Polars User Guide](https://pola-rs.github.io/polars-book/user-guide/howcani/missing_data.html) has a great overview of the topic from which we collect some take-homes:

- `np.nan` is also supported along `pl.Null`, but is not considered as a missing value by polars. This has implications on null counts, statistical aggregations, etc.
- `pl.Null`, and `np.nan`s have their own separate functions for imputing, counting, etc.


```{python}
m = pl.Series("a", [1, 2, None, np.nan])
```

```{python}
m.is_null() # checking for None's. Like pandas .isna()
```

```{python}
m.is_nan() # checking for np.nan's
```

For comparison with pandas:

```{python}
m_pandas = pd.Series([1, 2, None, np.nan])
```

```{python}
m_pandas.isna()
```

```{python}
m_pandas.isnull() # alias for pd.isna()
```

### Operating on Missing

We now compare the behavior of Polars to Pandas when operating on missing values.
When interpreting the following remember:

1. For Polars, nan is not missing. It is some unknown number. 
2. For Pandas, nan and Nulls are the same. 


```{python}
# Polars
m1 = pl.Series("a", [1, None, 2, ]) # python native None
m2 = pl.Series("a", [1, np.nan, 2, ]) # numpy's nan
m3 = pl.Series("a", [1, float('nan'), 2, ]) # python's nan

# Pandas
m4 = pd.Series([1, None, 2 ])
m5 = pd.Series([1, np.nan, 2, ])
m6 = pd.Series([1, float('nan'), 2, ])
```

```{python}
[
  m1.sum(), 
  m2.sum(), 
  m3.sum(), 
  m4.sum(), 
  m5.sum(), 
  m6.sum(),
  ]
```

Things to note:

-   `None` will be ignored by both, which is **unsafe**.
-   `np.nan` will be ignored by Pandas (unsafe), but not by Polars (safe).

Filling missing values; `None` and `np.nan` are treated differently:

```{python}
#| label: series-fill-null-for-null
m1.fill_null(0)
```

```{python}
#| label: series-fill-null-for-nan
m2.fill_null(0)
```

```{python}
#| label: series-fill-nan-for-nan
m2.fill_nan(0)
```

```{python}
#| label: series-drop-null-for-null
m1.drop_nulls()
```

```{python}
#| label: series-drop-nan-for-null
m1.drop_nans()
```

```{python}
#| label: series-drop-null-for-nan
m2.drop_nulls()
```

```{python}
#| label: series-interpolate-null-for-null
m1.interpolate()
```

```{python}
#| label: series-interpolate-null-for-nan
m2.interpolate() # np.nan is not considered missing, so why interpolate?
```




## Shape Transformations

```{python}
#| label: series-to-dummies
s.to_dummies()
```


```{python}
#| label: series-shift
s.shift(1, fill_value=999)
```

```{python}
#| label: series-shift-back
s.shift(-1)
```


```{python}
#| label: series-reshape
pl.Series("a",[1,2,3,4]).reshape((2,2))
```


## Arithmetic Operations

The following will fail for `pl.Series` for will work(!) for `pl.Expr`.

```{python}
#| label: series-add
#| eval: false

s.add(1)
```


```{python}
#| label: series-sub
#| eval: false

s.sub(1)
```


```{python}
#| label: series-mul
#| eval: false

s.mul(2)
```

```{python}
#| label: series-truediv
#| eval: false

s.truediv(2)
```

```{python}
#| label: series-floordiv
#| eval: false

s.floordiv(2)
```



## Mathematical Transformations

```{python}
#| label: series-abs
s.abs()
```

```{python}
#| label: series-sin
s.sin()
```

```{python}
#| label: series-exp
s.exp()
```

```{python}
#| label: series-hash
s.hash()
```

```{python}
#| label: series-log
s.log()
```


```{python}
#| label: series-sqrt
s.sqrt()
```

## Comparisons

```{python}
s.equals(pl.Series("a", [1, 2, 3]))
```


```{python}
#| label: series-eq
s.eq(2)
```

```{python}
#| label: series-ge
s.ge(2)
```

Clip, aka Winsorize. 

```{python}
#| label: series-clip
f.clip(lower_bound=1.5,upper_bound=2.5)
```

```{python}
#| label: series-round
f.round(2)
```

```{python}
#| label: series-ceil
f..add()ceil()
```

```{python}
#| label: series-floor
f.floor()
```

```{python}
#| label: series-which-max
s.peak_max()
```


## Search

```{python}
#| label: series-search-in-list
s.is_in([1, 10])
```


```{python}
#| label: series-search-in-range
s.is_between(2, 3, closed='both')
```



## Apply (map_elements)

Applying your own function. 
Also note the informative error message (introduced in Polars Ver 0.18.0) that will try to recommend a more efficient way to do things.

```{python}
s.map_elements(lambda x: x + 1)
```

Are lambda functions really so much slower?

```{python}
s1 = pl.Series(np.random.randn(int(1e6)))
```

Adding 1 with apply:

```{python}
%timeit -n2 -r2 s1.map_elements(lambda x: x + 1)
```

Adding 1 without apply:

```{python}
%timeit -n2 -r2 s1+1
```


## Cumulative Operations

```{python}
#| label: series-cum-max
s.cum_max()
```

```{python}
#| label: series-cumsum
s.cum_sum()
```

```{python}
#| label: series-cumprod
s.cum_prod()
```

```{python}
#| label: series-ewm
s.ewm_mean(com=0.5)
```

## Differentiation Operations

```{python}
#| label: series-diff
s.diff()
```

```{python}
#| label: series-pct-change
s.pct_change()
```



## Windowed Operations

```{python}
#| label: series-rolling-mean

s.rolling_mean(window_size=2)
```

```{python}
#| label: series-rolling-sum

s.rolling_sum(window_size=2)
```


```{python}
#| label: series-rolling-map
s.rolling_map(
  sum, 
  window_size=2)
```

Note:

- `sum` is the `pl.sum()` function. You cannot use arbitrary functions within a `rolling_map()` context. 
- Many rolling functions have been prepared. See the [computations section](https://docs.pola.rs/py-polars/html/reference/series/computation.html) of the Series class in the official API.



## Logical Aggregations

```{python}
#| label: make-boolean-series
b = pl.Series("a", [True, True, False])
b.dtype
```

```{python}
#| label: series-all
b.all()
```

```{python}
#| label: series-any
b.any()
```

```{python}
#| label: series-not
b.not_()
```




## Uniques and Duplicates


```{python}
#|label: series-is-duplicated
s.is_duplicated()
```


```{python}
#|label: series-is-unique
s.is_unique()
```

```{python}
#|label: series-n-unique
s.unique() # Same as Pandas drop_duplicates()
```

```{python}
s.n_unique()
```

```{python}
pl.Series([1,2,3,4,1]).unique_counts()
```

```{python}
#|label: series-is-first-distinct
s.is_first_distinct() # not sure there is a pl.Expr method 
```

Notes:

- `is_first_distinct()` has had many name changes in the past. It was `is_first()` in Polars 0.18.0, and `is_first_distinct()` in Polars 0.19.0.

- Do not confuse `.is_first_distinct()` with `.first()`. The former is a logical aggregation, and the latter is a series method. 

```{python}
#| label: first-counter-examples
(
  pl.DataFrame(pl.Series("a",[1,2,3,1]))
  .select(
    pl.col('a').first()
    )
)
```



## Casting

```{python}
s.cast(pl.Int32)
```

Things to note:

-   `cast()` is polars' equivalent of pandas' `astype()`.
-   The dtypes to cast to are **polars** dtypes. Don't try `s.cast("int32")`, `s.cast(np.int32)`, or `s.cast(pd.int)`
-   For a list of dtypes see the official [documentation](see%20https://pola-rs.github.io/polars/py-polars/html/reference/datatypes.html).



Find the most efficient dtype for a series; Like pandas `pd.to_numeric(..., downcast="..."`).

```{python}
s.shrink_dtype().dtype # 

```

Also see [here](http://braaannigan.github.io/software/2022/10/31/polars-dtype-diet.html).

Shrink the memory allocation to the size of the actual data (in place).

```{python}
s.shrink_to_fit() 
```



## Ordering and Sorting

```{python}
#| label: series-sort
s.sort()
```

```{python}
#| label: series-reverse
s.reverse()
```

```{python}
#| label: series-rank
s.rank()
```

```{python}
#| label: series-arg-sort
s.arg_sort() 
```

`arg_sort()` returns the indices that would sort the series. Same as R's `order()`.

```{python}
sorted_s = s[s.arg_sort()]
(s.sort() == sorted_s).all()
```

```{python}
#| label: series-shuffle
s.shuffle(seed=1) # random permutation
```



## Date and Time

There are 4 datetime dtypes in polars:

1.  **Date**: A date, without hours. Generated with `pl.Date()`.
2.  **Datetime**: Date and hours. Generated with `pl.Datetime()`.
3.  **Time**: Hour of day. Generated with `pl.Time()`.
4.  **Duration**: As the name suggests. Similar to `timedelta` in Pandas. Generated with `pl.Duration()`.

::: {.callout-warning}
Python has a sea of modules that support datetimes. 
A partial list includes: [datetime module](https://docs.python.org/3/library/datetime.html), extensions in [dateutil](https://dateutil.readthedocs.io/en/stable/), [numpy](https://numpy.org/doc/stable/reference/arrays.datetime.html), [pandas](https://pandas.pydata.org/pandas-docs/version/1.1/user_guide/timeseries.html), [arrow](https://arrow.readthedocs.io/en/latest/), the deprecated [scikits.timeseries](https://pytseries.sourceforge.net/) and certainly others. 
Be aware of the dtype you are using, and the accompanying methods.
:::


### Time Range

```{python}
from datetime import datetime, timedelta

date = (
  pl.datetime_range(
    start = datetime(
      year= 2001, month=2, day=2, hour =2, minute=24, second=12), 
    end = datetime(
      year=2002, month=2, day=5, hour =5, minute=34, second=45),
    interval='1s', 
    eager= True, 
  )
  .sample(10)
)

date
```

Things to note:

-   How else could I have constructed this series? What other types are accepted as `start` and `end`?
-   `pl.date_range` may return a series of dtype `Date` or `Datetime`. This depens of the granularity of the inputs.

```{python}
date.dtype
```

Cast to different time unit. 
May be useful when joining datasets, and the time unit is different.

```{python}
date.dt.cast_time_unit(time_unit="ms")
```

Datetime methods are accessed with the `.dt` namespace.


### Extract Time Sub-Units

```{python}
date.dt.second()
```

```{python}
date.dt.minute()
```

```{python}
date.dt.hour()
```

```{python}
date.dt.day()
```

```{python}
date.dt.week()
```

```{python}
date.dt.weekday()
```

```{python}
date.dt.month()
```

```{python}
date.dt.year()
```

```{python}
date.dt.ordinal_day() # day in year
```

```{python}
date.dt.quarter()
```

### Durations

Equivalent to Pandas `period` dtype.

```{python}
diffs = date.diff()
diffs
```

```{python}
diffs.dtype
```

::: {.callout-important}
The extrator of sub-units from a `pl.Duration` has recently changed from `.dt.X()` to `.dt.total_X()`.
:::

```{python}
diffs.dt.total_seconds()
```

```{python}
diffs.dt.total_minutes()
```

```{python}
diffs.dt.days()
```

```{python}
diffs.dt.total_hours()
```

### Date Aggregations

Note that aggregating dates, returns a `datetime` type object.

```{python}
date.dt.max()
```

```{python}
date.dt.min()
```

I never quite undersootd that is the "average day."
```{python}
date.dt.mean()
```

```{python}
date.dt.median()
```

### Date Transformations

```{python}
date.dt.offset_by(by="-100y")
```

Notice the syntax of `offset_by`. It is similar to R's `lubridate` package.

```{python}
date.dt.offset_by(by="1y2m20d")
```

```{python}
date.dt.truncate("1m")
```

```{python}
date.dt.round(every="1m")
```


### From Date to String

```{python}
date.dt.to_string("%Y-%m-%d")
```

Or equivalently:
```{python}
date.dt.strftime("%Y-%m-%d")
```


### From String to Datetime

```{python}
sd = pl.Series(
    "date",
    [
        "2021-04-22",
        "2022-01-04 00:00:00",
        "01/31/22",
        "Sun Jul  8 00:34:60 2001",
    ],
)
sd
```

Parse into `Date` type.

```{python}
sd.str.to_date(format="%F", strict=False)
```

Or equivalently:
```{python}
sd.str.strptime(dtype= pl.Date, format="%F", strict=False)
```

```{python}
sd.str.strptime(pl.Date, "%D", strict=False)
```

Parse into `Datetime` type.

```{python}
sd.str.to_datetime(format="%F %T", strict=False)
```

Or equivalently:
```{python}
sd.str.strptime(pl.Datetime, "%F %T", strict=False)
```

```{python}
sd.str.strptime(pl.Datetime, "%a %h %d %T %Y",strict=False)
```

Parse into `Time` dtype.
```{python}
sd.str.to_time("%a %h %d %T %Y",strict=False)
```
```{python}
sd.str.strptime(pl.Time, "%a %h %d %T %Y", strict=False)
```










## Strings

String methods are accessed with the `.str` namespace.

```{python}
#| label: make-string-series
st = pl.Series("a", ["foo", "bar", "baz"])
```

```{python}
st.str.len_chars() # gets number of chars. In ASCII this is the same as lengths()
```


```{python}
st.str.concat("-")
```



```{python}
st.str.count_matches(pattern= 'o') # count literal matches
```


```{python}
st.str.contains("foo|tra|bar") 
```

```{python}
st.str.contains("ba[a-zA-Z]") 
```

```{python}
st.str.contains("[a-zA-Z]{4,5}") 
```


```{python}
st.str.count_matches(pattern='[a-zA-Z]')
```


```{python}
st.str.ends_with("oo")
```

```{python}
st.str.starts_with("fo")
```

To extract the **first** appearance of a pattern, use `extract`:

```{python}
url = pl.Series("a", [
            "http://vote.com/ballon_dor?candidate=messi&ref=polars",

            "http://vote.com/ballon_dor?candidate=jorginho&ref=polars",

            "http://vote.com/ballon_dor?candidate=ronaldo&ref=polars"
            ])
```

```{python}
url.str.extract("=([a-zA-Z]+)", 1) 
# "=([a-zA-Z]+)" is read: "match an equality, followed by any number of alphanumerics".
```

To extract **all** appearances of a pattern, use `extract_all`:

```{python}
url.str.extract_all("=(\w+)") # \w is a shorthand for [a-zA-Z0-9_], i.e., alphanumerics and underscore.
```

```{python}
st.str.pad_end(8, "*")
```

```{python}
st.str.pad_start(8, "*")
```

```{python}
st.str.strip_chars_start('f')
```

```{python}
st.str.strip_chars_end('r')
```

Replacing first appearance of a pattern:

```{python}
st.str.replace("o+", "ZZ")
```

Replace all appearances of a pattern:

```{python}
st.str.replace_all("o", "ZZ")
```

String to list of strings. Number of splits inferred.

```{python}
st.str.split(by="o")
```

```{python}
st.str.split(by="a", inclusive=True)
```

String to dict of strings. 
Number of **splits** fixed.

```{python}
st.str.split_exact("a", 2)
```

String to dict of strings. 
Length of **output** fixed.

```{python}
st.str.splitn("a", 4)
```

Strip white spaces.

```{python}
pl.Series(['   ohh   ','   yeah   ']).str.strip()
```

```{python}
st.str.to_uppercase()
```

```{python}
st.str.to_lowercase()
```

```{python}
st.str.to_titlecase()
```

```{python}
st.str.zfill(5)
```

```{python}
st.str.slice(offset=1, length=1)
```





# Polars (Eager) DataFrames {#sec-dataframes}

General:

1.  There is no row index (like R's `data.frame`, `data.table`, and `tibble`; unlike Python's `pandas`).
2.  Will not accept duplicate column names (unlike pandas).

## DataFrame-Object Hosekeeping

A frame can be created as you would expect. From a dictionary of series, a numpy array, a pandas sdataframe, or a list of polars (or pandas) series, etc.

```{python}
#| label: make-dataframe


df = pl.DataFrame({
  "integer": [1, 2, 3], 
  "date": [
    (datetime(2022, 1, 1)), 
    (datetime(2022, 1, 2)), 
    (datetime(2022, 1, 3))], 
    "float":[4.0, 5.0, 6.0],
    "string": ["a", "b", "c"]})

df
```

```{python}
print(df)
```

```{python}
df.glimpse() #useful for wide frames
```

Things to note:

1.  The frame may be printed with Jupter's styling, or as ASCII with a `print()` statement.
2.  Shape, and dtypes, are part of the output.

```{python}
df.columns
```

```{python}
df.shape
```

```{python}
df.height # probably more useful than df.shape[0]
```

```{python}
df.width
```

```{python}
df.schema # similar to pandas info()
```

```{python}
df.with_row_count()
```

Add a single column

```{python}
df.with_columns(
    pl.Series("new", [1, 2, 3])
    ) # replaces the now-deprecated function `df.with_column()`
```

Add multiple columns

```{python}
df.with_columns(
  pl.Series("new1", [1, 2, 3]),
  pl.Series("new2", [4, 5, 6])
  )
```

```{python}
df.clone() # deep copy
```

The following commands make changes in place; I am thus creating a copy of `df`.

```{python}
df_copy = df.clone() # making a copy since 
df_copy.insert_at_idx(1, pl.Series("new", [1, 2, 3])) 
```

```{python}
df_copy.replace_at_idx(0, pl.Series("new2", [1, 2, 3]))
```

```{python}
df_copy.replace('float', pl.Series("new_float", [4.0, 5.0, 6.0])) 
```

```{python}
def foo(frame):
  return frame.with_columns(pl.Series("new", [1, 2, 3]))
df.pipe(foo)
```

```{python}
df.is_empty()
```

```{python}
df.clear() # make empty copy. replaced .cleared()
```

```{python}
df.clear().is_empty()
```

```{python}
df.rename({'integer': 'integer2'})
```

## Convert to Other Python Objects

### To Pandas

```{python}
df.to_pandas()
```

### To Numpy

```{python}
df.to_numpy()
```

### To List

```{python}
df.get_columns() # columns as list of polars series
```

```{python}
df.rows() # rows as list of tuples
```

### To Python Dict

```{python}
df.to_dict() # columns as dict of polars series
```

## Dataframe in Memory

```{python}
df.estimated_size(unit="gb")
```

```{python}
df.n_chunks() # number of ChunkedArrays in the dataframe
```

```{python}
df.rechunk() # ensure contiguous memory layout
```

```{python}
df.shrink_to_fit() # reduce memory allocation to actual size
```

## Statistical Aggregations

```{python}
df.describe()
```

Compare to pandas:

```{python}
df.to_pandas().describe()
```

Things to note:

-   Comparing to pandas:
    -   Polars will summarize all columns even if they are not numeric.
    -   The statistics returned are different.

Statistical aggregations operate column-wise (and in parallel).

```{python}
df.max()
```

```{python}
df.min()
```

```{python}
df.mean()
```

```{python}
df.median()
```

```{python}
df.sum()
```

```{python}
df.with_columns(pl.all()sum_horizontal())
```

```{python}
df.std()
```

```{python}
df.quantile(0.1)
```

## Selections {#sec-filtering-subsetting-frames}

1.  If you are used to pandas, recall there is no index. There is thus no need for `loc` vs. `iloc`, `reset_index()`, etc. See [here](https://pola-rs.github.io/polars-book/user-guide/howcani/selecting_data/selecting_data_indexing.html) for a comparison of extractors between polars and pandas.
2.  Filtering and selection is possible with the `[` operator, or the `filter()` and `select()` methods. The latter is recommended to facilitate query planning (discussed in @sec-query-planning).

Single cell extraction.

```{python}
df[0,0] # like pandas .iloc[]
```

Slicing along rows.

```{python}
df[0:1] 
```

Slicing along columns.

```{python}
df[:,0:1]
```

### Selecting Columns

Column selection by label

```{python}
df.select("integer")
# or df['integer']
# or df[:,'integer']
```

Select columns with list of labels

```{python}
df.select(["integer", "float"])
# or df[['integer', 'float']]
```

As of polars\>=15.0.0, you don't have to pass a list:

```{python}
df.select("integer", "float")
```

Column slicing by label

```{python}
df[:,"integer":"float"]
```

Note: `df.select()` does not support slicing ranges such as `df.select("integer":"float")`.

Get a column as a 1D polars frame.

```{python}
df.get_column('integer')
```

Get a column as a polars series.

```{python}
df.to_series(0)
```

```{python}
df.find_idx_by_name('float')
```

```{python}
df.drop("integer")
```

`df.drop()` not have an `inplace` argument. Use `df.drop_in_place()` instead.

### pl.col()

The `pl.col()` is **super important** for referencing columns. It will be used to select columns within a `df.select()` context, and to transform columns within a `df.with_columns()` context. It may extract a single column, a list, a particular (polars) dtype, a regex pattern, or simply all columns.

When exctracting along dtype, use polars' dtypes, not pandas' dtypes. For example, use `pl.Int64` instead of `np.int64`.

Select along dtype

```{python}
df.select(pl.col(pl.Int64))
```

```{python}
df.select(pl.col(pl.Float64))
```

```{python}
df.select(pl.col(pl.Utf8))
```

List of dtypes

```{python}
df.select(pl.col([pl.Int64, pl.Float64]))
```

Regular Expression

```{python}
df.select(pl.col("*")) # same as df.select(pl.all())
```

```{python}
df.select(pl.col("*").exclude("integer"))
```

```{python}
df.select(pl.col("*").exclude(pl.Float64))
```

::: {.callout-important}
`pl.col()` with regex is insanely powerful!
:::

```{python}
#| label: pl-col-with-regex


df.select(pl.col("^.*te.*$")) # regex matching anything with a "te"
```

Exciting! [New API](https://pola-rs.github.io/polars/py-polars/html/reference/selectors.html) for column selection. 

```{python}
#| label: pl-column-selector
import polars.selectors as cs

df.select(cs.starts_with('i'))
```

```{python}
#| label: pl-column-selector-set-opeartions

df.select(cs.starts_with('i') | cs.starts_with('d'))
```

```{python}
df.select(cs.starts_with('i') | cs.starts_with('d'))
```



### Filtering Rows

```{python}
df.head(2)
```

```{python}
df.limit(2) # same as pl.head()
```

```{python}
df.tail(1)
```

```{python}
df.take_every(2)
```

```{python}
df.slice(offset=1, length=1)
```

```{python}
df.sample(1)
```

```{python}
df.row(1) # get row as tuple
```

Row filtering by label

```{python}
df.filter(pl.col("integer") == 2)
```

Things to note:

-   The `[` operator does not support indexing with boolean such as `df[df["integer"] == 2]`.
-   The `filter()` method is recommended over `[` by the authors of polars, to facilitate lazy evaluation (discussed later).

### Selecting A Single Item

Exctracts the first element as a scalar. Useful when you output a single number as a frame object.

```{python}
pl.DataFrame([1]).item() # notice the output is not a frame, rather, a scalar.
```

## Uniques and Duplicates

```{python}
df.is_unique()
```

```{python}
df.is_duplicated()
```

```{python}
df.unique() # same as pd.drop_duplicates()
```

```{python}
df.n_unique()
```

## Missing

```{python}
df_with_nulls = df.with_columns(
    pl.Series("missing", [3, None, np.nan]),
)
```

```{python}
df_with_nulls.null_count() # same as pd.isnull().sum()
```

```{python}
df_with_nulls.drop_nulls() # same as pd.dropna()
```

**Note**: There is no `drop_nan()` method. See [here](https://stackoverflow.com/questions/75548444/polars-dataframe-drop-nans) for workarounds.

```{python}
df_with_nulls.fill_null(0) # same as pd.fillna(0)
```

But recall that `None` and `np.nan` are not the same thing.

```{python}
df_with_nulls.fill_nan(99)
```

```{python}
df_with_nulls.interpolate()
```

## Transformations

-   The general idea of colum trasformation is to wrap all transformations in a `with_columns()` method, and the select colums to operat on with `pl.col()`.
-   Previous versions of polars used `df.with_column()` and `df.with_columns()`. The `with_column()` method is now deprecated.
-   The output column will have the same name as the input, unless you use the `alias()` method to rename it.
-   The `with_columns()` is called a **polars context**.
-   The flavor of the `with_columns()` context is similar to pandas' `assign()`.
-   One can use `df.iter_rows()` to get an iterator over rows.

```{python}
df.with_columns(
    pl.col("integer") * 2,
    pl.col("integer").alias("integer2"),
    integer3 = pl.col("integer") * 3
)
```

Things to note:

-   The columns `integer` is multiplied by 2 in place, because no `alias` is used.
-   The column `integer` is copied, by renaming it to `integer2`.
-   As of polars version \>15.*.* (I think), you can use `=` to assign. That is how `integer3` is created.
-   You cannot use `[` to assign! This would not have worked `df['integer3'] = df['integer'] * 2`

If a selection returns multiple columns, all will be transformed:

```{python}
df.with_columns(
    pl.col([pl.Int64,pl.Float64])*2
)
```

```{python}
df.with_columns(
    pl.all().cast(pl.Utf8)
)
```

Apply your own lambda function.

```{python}
df.select([pl.col("integer"), pl.col("float")]).apply(lambda x: x[0] + x[1])
```

As usual, using your own functions may have a very serious toll on performance:

```{python}
df_big = pl.DataFrame(np.random.randn(1000000, 2), schema=["a", "b"]) # previous versions used columns= instead of schema=
```

```{python}
%timeit -n2 -r2 df_big.sum(axis=1)
```

```{python}
%timeit -n2 -r2 df_big.apply(lambda x: x[0] + x[1])
```

How would numpy and pandas deal with this row-wise summation?

```{python}
df.shift(1)
```

```{python}
df.shift_and_fill(1, 'WOW')
```


### Conditional Transformation (if-else)

```{python}
df.with_columns(
    pl.when(
      pl.col("integer") > 2
    )
    .then(1)
    .otherwise(pl.col("integer"))
    .alias("new_col")
)
```

Note what happens if `otherwise()` omitted:

```{python}
df.with_columns(
    pl.when(
      pl.col("integer") > 2
    )
    .then(1)
    # .otherwise(pl.col("integer"))
    .alias("new_col")
)
```



## Struct (multi-colum operations)

TODO

### Unset

https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.unnest.html#polars.DataFrame.unnest


## Sorting

```{python}
df.sort(by=["integer","float"])
```

```{python}
df.reverse()
```

## Joins {#sec-joins}

High level:

-   `df.hstack()` for horizontal concatenation; like pandas `pd.concat([],axis=1)` or R's `cbind`.
-   `df.vstack()` for vertical concatenation; like pandas `pd.concat([],axis=0)` or R's `rbind`.
-   `df.merge_sorted()` for vertical stacking, with sorting.
-   `pl.concat()`, which is similar to the previous two, but with memory re-chunking. `pl.concat()` also allows diagonal concatenation, if columns are not shared.
-   `df.extend()` for vertical concatenation, but with memory re-chunking. Similar to `df.vstack().rechunk()`.
-   `df.join()` for joins; like pandas `pd.merge()` or `df.join()`.

For more on the differences between these methods, see [here](https://www.rhosignal.com/posts/polars-extend-vstack/).

### hstack

```{python}
new_column = pl.Series("c", np.repeat(1, df.height))

df.hstack([new_column])
```

### vstack

```{python}
df2 = pl.DataFrame({
  "integer": [1, 2, 3], 
  "date": [
    (datetime(2022, 1, 4)), 
    (datetime(2022, 1, 5)), 
    (datetime(2022, 1, 6))], 
    "float":[7.0, 8.0, 9.0],
    "string": ["d", "d", "d"]})


df.vstack(df2)
```

### Concatenation

```{python}
pl.concat([df, df2]) 
# equivalent to:
# pl.concat([df, df2], how='vertical', rechunk=True, parallel=True) 
```

```{python}
pl.concat([df,new_column.to_frame()], how='horizontal')
```

### extend

```{python}
df.extend(df2) # like vstack, but with memory re-chunking. Similar to df.vstack().rechunk()
```

### merge_sorted

```{python}
df.merge_sorted(df2, key="integer") # vstacking with sorting.
```

**Caution**: Joining along rows is possible only if matched columns have the same dtype. Timestamps may be tricky because they may have different time units. Recall that timeunits may be cast before joining using `series.dt.cast_time_unit()`:

```{python}
#| eval: false
df.with_columns(
    pl.col(pl.Datetime("ns")).dt.cast_time_unit(tu="ms")
)            
```

If you cannot arrange schema before concatenating, use a diagonal concatenation:

```{python}
pl.concat(
    [df,new_column.to_frame()], 
    how='diagonal')
```

### join

```{python}
df.join(df2, on="integer", how="left")
```

Things to note:

-   Repeating column names have been suffixed with "\_right".
-   Unlike pandas, there are no indices. The `on`/`left_on`/`right_on` argument is always required.
-   `how=` may take the following values: 'inner', 'left', 'outer', 'semi', 'anti', 'cross'.
-   The join is super fast, as demonstrated in @sec-motivation above.

### join_asof

```{python}
df.join_asof(
    df2, 
    left_on="date", 
    right_on='date', 
    by="integer", 
    strategy="backward", 
    tolerance='1w')
```

Things to note:

-   Yes! `merge_asof()` is also available.
-   The `strategy=` argument may take the following values: 'backward', 'forward'.
-   The `tolerance=` argument may take the following values: '1w', '1d', '1h', '1m', '1s', '1ms', '1us', '1ns'.

## Reshaping

High level:

-   `df.transpose()` as the name suggests.
-   `df.melt()` for wide to long.
-   `df.pivot()` for long to wide.
-   `df.explode()` for breaking strings into rows.
-   `df.unstack()`

```{python}
df.transpose()
```

### Wide to Long

```{python}
# The following example is adapted from Pandas documentation: https://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html

np.random.seed(123)
wide = pl.DataFrame({
    'famid': ["11", "12", "13", "2", "2", "2", "3", "3", "3"],
    'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],
    'ht1': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],
    'ht2': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]})

wide.head(2)
```

```{python}
wide.melt(
  id_vars=['famid', 'birth'], 
  value_vars=['ht1', 'ht2'], 
  variable_name='treatment', 
  value_name='height').sample(5)
```

Break strings into rows.

```{python}
wide.explode(columns=['famid']).limit(5)
```

### Long to Wide

```{python}
# Example adapted from https://stackoverflow.com/questions/5890584/how-to-reshape-data-from-long-to-wide-format

long = pl.DataFrame({
    'id': [1, 1, 1, 2, 2, 2, 3, 3, 3],
    'treatment': ['A', 'A', 'B', 'A', 'A', 'B', 'A', 'A', 'B'],
    'height': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1]
    })
  
long.limit(5)
```

```{python}
long.pivot(
  index='id', # index in the wide format
  columns='treatment', # defines columns in the wide format
  values='height')
```

```{python}
long.unstack(step=2) # works like a transpose, and then wrap rows. Change the `step=` to get the feeling. 
```

## Groupby

Grouping over categories:

-   `df.partion_by()` will return a list of frames.
-   `df.groupby()` for grouping. Just like pandas, only parallelized, etc. The output will have the length of the number of groups.
-   `over()` will assign each row the aggregate in the group. Like pandas `groupby.transform`. The output will have the same length as the input.

Grouping over time:

-   `df.grouby_rolling()` for rolling window grouping, a.k.a. a sliding window. Each row will be assigned the aggregate in the window.
-   `df.groupby_dynamic()` for dynamic grouping. Each period will be assigned the agregate in the period. The output may have more rows than the input.

After grouping:

-   `df.groupby().agg()` for aggregating.
-   `df.groupby().apply()` for applying a function to each group.
-   `df.groupby().count()` for counting.
-   `df.groupby().first()` for getting the first row of each group.
-   ...

See the [API reference](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/groupby.html) for the various options. Also see the [user guide](https://pola-rs.github.io/polars-book/user-guide/howcani/timeseries/temporal_groupby.html) for more details.

```{python}
df2 = pl.DataFrame({
    "integer": [1, 1, 2, 2, 3, 3],
    "float": [1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
    "string": ["a", "b", "c", "d", "e", "f"],
    "datetime": [
        (datetime(2022, 1, 4)), 
        (datetime(2022, 1, 4)), 
        (datetime(2022, 1, 4)), 
        (datetime(2022, 1, 9)), 
        (datetime(2022, 1, 9)), 
        (datetime(2022, 1, 9))],
})
```

```{python}
df2.partition_by("integer")
```

```{python}
groupper = df2.groupby("integer")
groupper.count()
```

```{python}
groupper.sum()
```

Groupby a fixed time window with `df.groupby_dynamic()`:

```{python}
(
  df2
  .groupby_dynamic(index_column="datetime", every="1d")
  .agg(pl.col("float").sum())
)
```

If you do not want a single summary per period, rather, a window at each datapoint, use `df.groupby_rolling()`:

```{python}
(
  df2
  .groupby_rolling(index_column="datetime", period='1d')
  .agg(pl.col("float").sum())
)
```

### Over

You may be familar with pandas `groupby().transform()`, which will return a frame with the same row-count as its input. You may be familiar with Postgres SQL [window function](https://www.postgresql.org/docs/current/tutorial-window.html). You may not be familiar with either, and still want to aggregate within group, but propagate the result to all group members. Polars' `over()` is the answer.

```{python}
df.with_columns(
  pl.col("float").sum().over("string").alias("sum")
).limit(5)
```

**Careful**: `over()` should follow the aggregation. The following will not fail, but return the wrong result:

```{python}
df.with_columns(
  pl.col("float").over("string").sum().alias("sum")
).limit(5)
```

## Processing Multiple Frames Simultanously

Q: What if you want to access a column from frame `df`, when processing frame `df2`?\
A: Just join them.\
Q: What if they are not joinable?\
A: Use a diagonal join. Q: Can't I just add a search-space into the lazy query? A: Ahhh! Use `df.with_context()`.

```{python}
df3 = pl.Series("blah", [100,2,3]).to_frame()

q = (
    df.lazy()
    .with_context( # add colums of df2 to the search space
        df3.lazy()
        )
    .with_columns(
        pl.col('float').map_dict(remapping={4.0:None}, default=100).fill_null(pl.col('blah').mean()).alias('float2'),
        )
    )

q.collect()
```

Things to note:

-   `with_context()` is a lazy operation. This is great news, since it means both frames will benefit from query planning, etc.
-   `with_context()` will not copy the data, but rather, add a reference to the data.
-   Why not use `pl.col('blah').mean()` within the `map_dict()`? That is indeed more reasonable. It simply did not work.
-   Try it yourself: Can you use multiple `with_context()`?


### Imputation Example

```{python}
train_lf = pl.LazyFrame(
    {"feature_0": [-1.0, 0, 1], "feature_1": [-1.0, 0, 1]}
)
test_lf = pl.LazyFrame(
    {"feature_0": [-1.0, None, 1], "feature_1": [-1.0, 0, 1]}
)

(
  test_lf
  .with_context(
    train_lf
    .select(pl.all().suffix("_train")))
    .select(
      pl.col("feature_0")
      .fill_null(
        pl.col("feature_0_train").median()
      )
  )
).collect()

```


# Polars Expressions

# Polars LazyFrames

# Plotting

# ML 











